Blackadder Universal Deployment Tool
------------------------------------

How to build:
 
 Invoke the make directly, you system must have already installed:
   - igraph library
   - libconfig http://www.hyperrealm.com/libconfig/
   - TCLAP template library http://tclap.sourceforge.net/
   - boost library (apt-get install libboost-system-dev libboost-thread-dev)


How to run:

  The program accepts types of configuration files as mandatory arguments: 
     - Blackadder Configuration file format that describes nodes and their connectivity (graph)
     - Blackadder Configuration file format that describes only available nodes. The tool will built a random graph for these nodes using
       the barabasi-albert model.

  How to invoke the tool using the first configuration file:
   ./deploy -c <config file>
  How to invoke the tool using the second configuration file:
   ./deploy -c <config file> -a

 In the second case the tool will produce autogenerated.cfg and edgevertices.cfg.  
 The files are stored in the WRITE_CONF folder which is designated in the configuration file.
 autogenerated.cfg is a configuration file of the first type that includes the connectivity graph. This file can be used
 to repeat the autogenerated experiment. edgevertices.cfg contain the leaf nodes of the autogenerated graph to use them
 in experiment deployment.

 Other tool functions:
  
 The tool accepts a .tgz file which tranfers to all nodes and decompresses at the remote user home folder:
 ./deploy -c <config file> [-a] [-t <filename>.tgz]
 
 To start the deployment server, which listens at port 9999 for node addition/deletion requests:
 ./deploy -c <config file> --dynamic
 
 To invoke the deployment client:
 ./client <deployment-server-ip> <new-node-config-file>
 
 For a complete example of the dynamic deployment tool, the user must first deploy a segment of the topology using any of the existing files:
 ./deploy -c testbed_topology.cfg --dynamic
 And then for every new node, he has to prepare the new_node.cfg file with the appropriate parameters and run the client:
 ./client <deployment-server-ip> new_node.cfg
 For node addition label 0000000x must be used, while for node deletion use label xxxxxxxx. (check respective sample files new_node.cfg and delete_node.cfg)
 
 
 Planetlab specific file planetlabgetnodes.py
 --------------------------------------------

  This is a python script that works for planetlab-eu accounts.
  Edit the file and add your credentials in the Auth Dictionary field.

  Just execute the file: python planetlabgetnodes.py
  The tool will resolve all IPs and build config type 2 format
  of the available planetlab nodes. 

Mac OS X
---------------------------------------------
Click in Mac OS X only supports sending on real ethernet interfaces. This
is a problem if you are trying to test between OS X and a guest Vbox machine.
One solution is to use a bridge device on OS X, this will support sending and
receiving but requires some arguments in the conf file that look like:
fromdev0::OsxFromDevice(bridge0, PROMISC true, BPF_FILTER "ether dst 7e:d1:c3:c9:2c:00", OUTBOUND true);
where the ether address of the receiving bridge interface is included.
The reason is that PROMISC is not set by default and is needed, but
when set there is a bug where both send and received are received (it
will not work in receive only for some reason)
The deploy tool will look after this, but make sure you include
	operating_system = "Darwin"
in the node part of the deploy config.