################################################################################
# Template NAP configuration file following libconfig syntax
#
# Author: Sebastian Robitzsch <sebastian.robitzsch@interdigital.com>
#
napConfig:
{
################################################################################
# Interface name
#
# This variable tells the NAP on which local network device it communicates with
# IP endpoints. Note, virtual interfaces and bridges have not been tested.

interface = "eth2";

################################################################################
# Network Configuration
#
# Each NAP acts in a particular routing prefix following the IP-over-ICN
# namespace definition. This routing prefix is configured here using a network
# address and a netmask.
#
# If this NAP acts as an ICN GW use 0.0.0.0/0

networkAddress = "172.16.111.0";
netmask = "255.255.255.0";

# If this NAP acts as an ICN GW it is advisable to manually set the routing
# prefix which covers all NAPs.  
#icnGwNetworkAddress = "172.16.0.0";
#icnGwNetmask = "255.255.0.0";

# For host-based deployments where the NAP servers a single IP endpoint only
# the following variable must be uncommented and the IP address of the IP
# endpoint the NAP servers is stated there.

#ipEndpoint = "172.16.111.111";

################################################################################
# Routing Prefixes
#
# In order to reach the NAP which serves a particular routing prefix all
# existing prefixes must be provided to the NAP. This procedure is manually
# configured using the list below. Each routing prefix consists of a network
# address of format a.b.c.d and its netmask with 4 octets again.
#
# In case an ICN GW has been configured to provide Internet access this is
# indicated by a special entry at the end(!) of the list of routing prefixes. If
# no such network element exists, simply remove/comment the corresponding entry.
#
# The order does not matter. The NAP orders all prefixes.

routingPrefixes =
(
	{
		networkAddress = "172.16.120.0";
		netmask = "255.255.255.0";
	}
#	,
#	{#ICN GW
#		networkAddress = "0.0.0.0";
#		netmask = "0.0.0.0";
#	}
);

################################################################################
# FQDN Registrations
#
# FQDNs this NAP serves including their IP address and port. If port is not
# present Port 80 is automatically assumed.
#
# Note, even if the NAP does not serve any FQDN, 'fqdns = ();' must be left
# here. Otherwise, the NAP does not start

fqdns =
(
#	{
#		fqdn = "web.point";
#		ipAddress = "172.16.120.120";
#		port = 80;
#	}
#	,
#	{
#		fqdn = "video.point";
#		ipAddress = "172.16.120.121";
#	}
#	,
#	{#wildcard
#		fqdn = "*";
#		ipAddress = "";
#	}
);

################################################################################
# Maximum Transmission Unit (MTU)
#
# This setting allows to lower the size of the Ethernet payload the NAP
# publishes to the local ICN core. Reason being scenarios where VPNs or
# commercial links such as PPPoE are used as the underlying technology which 
# require smaller Ethernet frames in order to not cause fragmentation. Adjusting
# the MITU accordingly can significantly boosts the performance of the NAP.

#mitu = 1304;

################################################################################
# Transparent HTTP Proxy Configuration

### Listening Port
#
# For any HTTP traffic sent over TCP/IP with TCP destination Port 80 the NAP
# handles the traffic differently leveraging the HTTP-over-ICN namespace. As the
# NAP acts as a transparent proxy, a special iptables rule is inserted which
# forwards HTTP traffic to a port usually used by Squid.

#httpProxyPort = 3127;

### TCP Interception Port
# Configure the port on which the transparent HTTP proxy should intercept. 

#tcpInterceptionPort = 80

###
# TCP socket buffer sizes
#
# When reading from a TCP a packet buffer must be created first which eventually
# determines the maximal TCP segment size to which the window size grows for
# larger file transfers. As the HTTP proxy distinguishes between TCP sessions
# towards clients and servers there are two separate variables which allow to
# configure the packet buffers. More information about how guidelines how to
# configure them can be found in the NAP manual (doc/tex)

#tcpClientSocketBufferSize = 1460;
#tcpServerSocketBufferSize = 1460;

###
# TCP backlog
#
# Even though the NAP always aims to read the maximum backlog value this fails
# on some systems. In that case the NAP sets it to 128 which is the default
# setting in modern Linux servers (/proc/sys/net/ipv4/tcp_max_syn_backlog)

#backlog = 128;

################################################################################
# Buffer cleaner interval
#
# All handlers have a buffer in case a packet cannot be published under its CID
# due to an outstanding START_PUBLISH notification. In case there's no
# subscriber available within a given interval the buffer cleaner per handler
# cleans aged packets from the buffer. The value given is assumed to be seconds.

#bufferCleanerInterval = 10;

################################################################################
# LTP - initial credit
#
# The lightweight transport protocol for HTTP packet delivery is using a
# credit-based transport mechanism, similar to SPDY/HTTP2. 

#ltpInitialCredit = 5;

################################################################################
# LTP - RTT-based timeout multiplier
#
# Whenever LTP starts a timeout counter to wait for a response from one of its
# receivers it uses a multiple of the previously measured RTT.

#ltpRttMultiplier = 5;

################################################################################
# LTP - Number of RTT values used to calculate RTT
#
# For obtaining RTT for LTP timeout checkers the NAP keeps a list of measured
# RTT values to cope with potential RTT outlier values. This variable allows to
# configure the size of the list which is used to obtain the average

#ltpRttListSize = 10;

################################################################################
# Surrogacy
#
# In case the NAP is supposed to act as an extended NAP (eNAP), a listener must
# be started which allows a surrogate agent to activate/deactivate a particular
# surrogate server by utilising the NAP-SA interface. 
#
# If this variable is uncommented and set to true the NAP opens a netlink socket
# and follows the NAP-SA interface specification accordingly. 

#surrogacy = false;

################################################################################
# Static surrogate on localhost
#
# In some scenarios a (static) surrogate is located on the same machine where
# the binary is running, i.e. localhost. In order to cope with this special
# use case two methods have been identified: 1) Using the kernel's IP routing
# table or 2) use the NAP to relay the HTTP requests. The variables below are
# for Option 2

#localSurrogateMethod = "kernel";
#localSurrogateIpAddress = "10.253.253.253";

#localSurrogateMethod = "nap";
#localSurrogateFqdn = "surrogacy.point";
#localSurrogatePort = 80;

################################################################################
# Traffic control
#
# Dropping
# This setting allows to control how many packets - on average - will be
# dropped. At the moment the packet drop rate is implemented in LTP only. For
# instance, by setting the drop rate to 100 the NAP drops on average every 100th
# packet across all publish_data operations.
#
# Note, LTP has been designed for well managed networks with a low packet error
# rate. Thus, it is not advisable to set the drop rate lower than 100. 
#
# In order to enable traffic control features the -DTRAFFIC_CONTROL compiler
# flag must be enabled in the Makefile for the NAP.

#tcDropRate = 0;

################################################################################
# Monitoring data point interval
#
# The reporting of monitoring data points to the monitoring server is realised
# via MOLY, a library available through Blackadder. The interval of how often
# available data points are being sent off is up to the process (in this case
# the NAP). This interval can be configured here in seconds. If set to 0 the 
# reporting of monitoring data points is disabled

#molyInterval = 0;

################################################################################
# Use libnet to send off IP packets rather than sendto
#
# It turned out that some Linux kernel/OS versions do not accept IP packets sent
# through a IPPROTO_RAW socket. To mitigate this problem, the NAP can switch to
# libnet which is used for fragmented packets anyway. If 'socketType' is not
# present 'linux' is assumed as the default value.
#
# Options: 'libnet' or 'linux'

#socketType="linux";

################################################################################
# Turn off HTTP-over-ICN mapping
#
# This variable allows to turn off the mapping of packets towards TCP Port 80
# into the HTTP namespace. Consequently, all traffic will be treated as pure IP
# and the IP-over-ICN namespace will be used.

#httpHandler = true;

};
