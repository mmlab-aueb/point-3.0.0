# 3.3.1
- LTP buffer did not clean up all packets correctly and leaked some in sNAP
- IP handler leaked when reassembling packet towards IP endpoint
- TCP client of HTTP proxy only gets access to the LTP buffer once the previous LTP session has been finished (WED received)

# 3.3.0
- Reporting HTTP and IP handler byte counts through MOLY via *X_BYTES_*
primitives

# 3.2.2
- SIGPIPE issue in TCP client wasn't fully resolved
- Several logging adjustments
- Detault TCP buffer size set to 4096

# 3.2.1
- SIGPIPE issue in TCP client of HTTP proxy addressed: read() function must be
	called before write(). If NAP is (for some reason) heavily overloaded the
	time to perform all the actions between write() and read() take longer than
	the response from the server coming back and hence causes a SIGPIPE
- TCP socket buffers derived by default MTU of 1500 instead of 65535 which will
	help preventing SIGPIPE signals in scenarios where the link/web server
	itself cannot cope with the bytes pushed on the TCP socket(s) by the sNAP
- Updated LaTeX-based NAP documentation about the HTTP proxy
	
# 3.2.0
- Updated PCAP filter -> "!(dst net 224.0.0.0/24)" rule removed
- ICMP RFC-complaint handling of IP packets with DF flag set but larger than MITU
- TCP interception port configurable via tcpInterceptionPort in nap.cfg

# 3.1.1
- SIGPIPE issue resolved which was sent by TCP socket while writing too much data

# 3.1.0
- Reliability improvements and important bug fixes in various parts of both handlers (IP/HTTP)
- MAPI integration (NID)

# 3.0.0
- Revamped NAP for a more modular representation of the NAP functional blocks
- Significant performance improvements esp. for HTTP-over-ICN
- Class-based logging feature using C++ namespaces


# 2.0.0
- NAP release supporting HTTP- and IP-over-ICN with an HTTP proxy performing transparent TCP interception

# 1.0.0
- Initial release of a NAP performing IP-over-ICN
